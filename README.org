* cl-frugal-uuid (WiP)

#+begin_html
<div align="center">
  <a href="https://upload.wikimedia.org/wikipedia/commons/5/5f/NASA_satellite_view_of_Southern_Ocean_phytoplankton_bloom_%28crop%29.jpg" target="_blank">
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/NASA_satellite_view_of_Southern_Ocean_phytoplankton_bloom_%28crop%29.jpg/320px-NASA_satellite_view_of_Southern_Ocean_phytoplankton_bloom_%28crop%29.jpg" width="220" height="157">
  </a>
</div>
<p align="center">
  <a href="https://github.com/ak-coram/cl-frugal-uuid/actions">
    <img alt="Build Status" src="https://github.com/ak-coram/cl-frugal-uuid/workflows/CI/badge.svg" />
  </a>
</p>
#+end_html

Common Lisp [[https://en.wikipedia.org/wiki/Universally_unique_identifier][UUID]] library with zero dependencies

** Rationale

- Permissive license (MIT)
- Small (e.g. doesn't rely on [[https://github.com/sharplispers/ironclad][Ironclad]] by default)

** Limitations

Currently only generating timestamp based UUIDs (Version 1) and random
UUIDs (Version 4) is supported.

Please note that by default the implementation dependent built-in CL
random number generator is used, which might not be of sufficient
quality for your purposes. The use of cryptographic-quality random
numbers is strongly recommended in order to reduce the probability of
repeated values. Please see the section on randomness in this README
for setting up an alternative source of random numbers.

You can also use the [[https://github.com/ak-coram/cl-frugal-uuid#non-frugal-setup][:frugal-uuid/non-frugal]] system to change the
defaults and provide support for generating name-based UUIDs (versions
3 and 5).

The following implementations and operating systems are tested via [[https://github.com/ak-coram/cl-frugal-uuid/blob/main/.github/workflows/CI.yml][CI]]:

- [[https://sbcl.org/][SBCL]] (Linux, Windows, macOS)
- [[https://ccl.clozure.com/][CCL]] (Linux, macOS)
- [[https://ecl.common-lisp.dev/][ECL]] (Linux, macOS)

** Installation

cl-frugal-uuid can be installed via [[https://www.quicklisp.org/][Quicklisp]] from the [[https://ultralisp.org/][Ultralisp]]
distribution:

#+begin_src lisp
  (ql-dist:install-dist "http://dist.ultralisp.org/" :prompt nil)
  (ql:quickload :frugal-uuid)
#+end_src

** Basic usage

#+begin_src lisp
  ;; Generate version 1 UUID
  (fuuid:make-v1) ; => #<FRUGAL-UUID:UUID 58c3e000-1875-100c-a524-89154ef00c1c>

  ;; Generate random UUID
  (fuuid:make-v4) ; => #<FRUGAL-UUID:UUID 3ffc05ba-9c35-4f21-8535-beba03a2495c>

  ;; Convert random UUID to canonical string representation
  (fuuid:to-string (fuuid:make-v4)) ; => "2172e412-06a6-4cfb-bbf1-3584aadaed15"

  ;; Parse UUID from string
  (fuuid:from-string "0909e4f4-8333-4712-8609-5ae02d735772")
  ;; => #<FRUGAL-UUID:UUID 0909e4f4-8333-4712-8609-5ae02d735772>

  ;; Convert UUID to octets
  (fuuid:to-octets (fuuid:make-v4))
  ;; => #(33 194 68 252 59 137 78 19 177 22 25 166 226 241 44 55)

  ;; Compare two random UUID values
  (fuuid:uuid= (fuuid:make-v4) (fuuid:make-v4)) ; => NIL

  ;; Loosely compare UUID with canonical string representation
  (fuuid:uuid-equal-p
   (fuuid:from-string "0909e4f4-8333-4712-8609-5ae02d735772")
   "0909e4f4-8333-4712-8609-5ae02d735772") ; => T
#+end_src

** non-frugal setup

#+begin_src lisp
  (ql:quickload :frugal-uuid/non-frugal)
#+end_src

The above system is provided to conveniently setup the following:

- Use Ironclad PRNG to generate strong random numbers.
- Automatically use a new PRNG for each new thread (via
  bordeaux-threads).
- Randomize node ID and clock sequence for generating version 1 UUIDs
  for each new thread (via bordeaux-threads).
- Define the MAKE-V3 and MAKE-V5 functions relying on the babel and
  Ironclad libraries.

See [[https://github.com/ak-coram/cl-frugal-uuid/blob/main/non-frugal.lisp][non-frugal.lisp]] for details.

** UUID Versions

*** Version 1

Node ID and clock sequence are initialized randomly by default, but
you can provide your own values (or even your own function for
generating timestamp values) using MAKE-V1-GENERATOR.

To avoid repeated values, it is recommended for multithreaded
applications to use a separate generator for each thread. Please also
see the section on randomness for setting up alternative sources for
random numbers.

 For example:

#+begin_src lisp
  (bordeaux-threads-2:make-thread
   (lambda ()
     (format t "~A" (fuuid:make-v1)))
   :initial-bindings `((fuuid:*v1-generator* . ,(fuuid:make-v1-generator))))
#+end_src

*** Version 2

Generating "DCE security" UUIDs (version 2) is not implemented.

*** Version 3

See section for version 5 below.

*** Version 4

#+begin_src lisp
  ;; Generate random UUID
  (fuuid:make-v4)

  ;; Provide 128-bit random number directly and set the bits for version 4
  (fuuid:make-v4-from-integer
   (secure-random:number #xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))
#+end_src

*** Version 5

If you're using the :frugal-uuid/non-frugal system, then you can also
generate name-based (version 3 or version 5) UUIDs:

#+begin_src lisp
  (fuuid:make-v3 fuuid:*ns-url* "https://html5zombo.com/")
  ;; => #<FRUGAL-UUID:UUID a76f94c8-b970-33d8-bac6-84f18fbbc489>

  (let ((cheese-namespace (fuuid:make-v4)))
    (fuuid:make-v5 cheese-namespace "Orda"))
  ;; => #<FRUGAL-UUID:UUID dd4d48d9-d46b-58a0-977e-e9e5e20a6e9c>
#+end_src

** Randomness

If you have an alternative source of random numbers, you can use it
instead of the built-in random number generator. Please consult the
documentation of your chosen implementation or library for details on
thread-safety if you intend to use this in a multi-threaded program.

*** Ironclad

A setup using [[https://github.com/sharplispers/ironclad][Ironclad]]:

#+begin_src lisp
  (ql:quickload :ironclad/prngs)

  ;; Use the default Ironclad PRNG:
  (fuuid:initialize-random #'crypto:strong-random)

  ;; Setup with custom PRNG:
  (fuuid:initialize-random #'crypto:strong-random
                           (ironclad:make-prng :os))
#+end_src

*** secure-random

Below you'll find and example using the [[https://github.com/avodonosov/secure-random][secure-random]] library which
relies on OpenSSL:

#+begin_src lisp
  ;; Load library for generating secure random numbers
  (ql:quickload :secure-random)

  ;; Setup random number generator
  (fuuid:initialize-random #'secure-random:number
                           secure-random:*generator*)
#+end_src

*** Dynamic binding

#+begin_src lisp
  ;; Dynamically bind random number generator:
  (fuuid:with-random-number-generator (make-random-state t)
    (fuuid:make-v4))

  ;; Dynamically bind both random number generator & random function:
  (fuuid:with-random (#'random (make-random-state t))
    (fuuid:make-v4))
#+end_src

** Running tests

- Load the tests via Quicklisp:

#+begin_src lisp
  (ql:quickload :frugal-uuid/test)
#+end_src

- Use [[https://asdf.common-lisp.dev/][ASDF]] or [[https://fiveam.common-lisp.dev/][FiveAM]] to run the tests:

#+begin_src lisp
  ;; Using ASDF:
  (asdf:test-system :frugal-uuid)
  ;; Using FiveAM directly:
  (fiveam:run! :frugal-uuid)
#+end_src

** Legal

- Released under the MIT License.
- [[https://commons.wikimedia.org/wiki/File:NASA_satellite_view_of_Southern_Ocean_phytoplankton_bloom_(crop).jpg][Source]] for README photo
