* cl-frugal-uuid (WiP)

#+begin_html
<div align="center">
  <a href="https://upload.wikimedia.org/wikipedia/commons/5/5f/NASA_satellite_view_of_Southern_Ocean_phytoplankton_bloom_%28crop%29.jpg" target="_blank">
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/NASA_satellite_view_of_Southern_Ocean_phytoplankton_bloom_%28crop%29.jpg/320px-NASA_satellite_view_of_Southern_Ocean_phytoplankton_bloom_%28crop%29.jpg" width="220" height="157">
  </a>
</div>
<p align="center">
  <a href="https://github.com/ak-coram/cl-frugal-uuid/actions">
    <img alt="Build Status" src="https://github.com/ak-coram/cl-frugal-uuid/workflows/CI/badge.svg" />
  </a>
</p>
#+end_html

Common Lisp [[https://en.wikipedia.org/wiki/Universally_unique_identifier][UUID]] library with zero dependencies

** Rationale

- Permissive license (MIT)
- Small (e.g. doesn't rely on [[https://github.com/sharplispers/ironclad][Ironclad]])

** Limitations

Currently only generating random UUIDs (Version 4) is
supported. Please note that by default the implementation dependent
built-in CL random number generator is used, which might not be of
sufficient quality for your purposes. The use of cryptographic-quality
random numbers is strongly recommended in order to reduce the
probability of repeated values. Please see the section of this README
on "UUID Version 4" for setting up an alternative source of random
numbers.

The following implementations and operating systems are tested via [[https://github.com/ak-coram/cl-frugal-uuid/blob/main/.github/workflows/CI.yml][CI]]:

- [[https://sbcl.org/][SBCL]] (Linux, Windows, macOS)
- [[https://ccl.clozure.com/][CCL]] (Linux, macOS)
- [[https://ecl.common-lisp.dev/][ECL]] (Linux, macOS)

** Installation

cl-frugal-uuid can be installed via [[https://www.quicklisp.org/][Quicklisp]] from the [[https://ultralisp.org/][Ultralisp]]
distribution:

#+begin_src lisp
  (ql-dist:install-dist "http://dist.ultralisp.org/" :prompt nil)
  (ql:quickload :frugal-uuid)
#+end_src

** Basic usage

#+begin_src lisp
  ;; Generate random UUID
  (fuuid:make-v4) ; => #<FRUGAL-UUID:UUID 3ffc05ba-9c35-4f21-8535-beba03a2495c>

  ;; Convert random UUID to canonical string representation
  (fuuid:to-string (fuuid:make-v4)) ; => "2172e412-06a6-4cfb-bbf1-3584aadaed15"

  ;; Parse UUID from string
  (fuuid:from-string "0909e4f4-8333-4712-8609-5ae02d735772")
  ;; => #<FRUGAL-UUID:UUID 0909e4f4-8333-4712-8609-5ae02d735772>

  ;; Compare two random UUID values
  (fuuid:uuid= (fuuid:make-v4) (fuuid:make-v4)) ; => NIL

  ;; Loosely compare UUID with canonical string representation
  (fuuid:uuid-equal-p
   (fuuid:from-string "0909e4f4-8333-4712-8609-5ae02d735772")
   "0909e4f4-8333-4712-8609-5ae02d735772") ; => T
#+end_src

** UUID Versions

*** Version 4

If you have an alternative source of random numbers, you can use it
instead of the built-in random number generator. Please consult the
documentation of your chosen library for details on thread-safety if
you intend to use this in a multi-threaded program.

Below you'll find and example using the [[https://github.com/avodonosov/secure-random][secure-random]] library which
relies on OpenSSL:

#+begin_src lisp
  ;; Load library for generating secure random numbers
  (ql:quickload :secure-random)

  ;; Setup random number generator
  (fuuid:initialize-v4-random #'secure-random:number
                              secure-random:*generator*)

  ;; Generate random UUID using secure random numbers
  (fuuid:make-v4) ; => #<FRUGAL-UUID:UUID 4bed852c-e726-4007-9a1f-e569a59d060a>
#+end_src

Another alternative setup using [[https://github.com/sharplispers/ironclad][Ironclad]]:

#+begin_src lisp
  (ql:quickload :ironclad)

  ;; Setup random number generator
  (fuuid:initialize-v4-random #'crypto:strong-random
                              (ironclad:make-prng :os))

  ;; Generate random UUID using Ironclad
  (fuuid:make-v4) ; => #<FRUGAL-UUID:UUID 4bed852c-e726-4007-9a1f-e569a59d060a>

  ;; Use the default Ironclad PRNG instead:
  (fuuid:initialize-v4-random #'crypto:strong-random)
  (fuuid:make-v4) ; => #<FRUGAL-UUID:UUID 547d5dce-1de5-41f7-bd6f-22de70e898a7>
#+end_src

Alternatively you can use 128-bit random integers directly:

#+begin_src lisp
  (fuuid:make-v4-from-integer
   (secure-random:number #xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))
#+end_src

Some other examples which might be helpful:

#+begin_src lisp
  ;; Dynamically bind random number generator:
  (fuuid:with-v4-random-number-generator (make-random-state t)
    (fuuid:make-v4))

  ;; Dynamically bind both random number generator & random function:
  (fuuid:with-v4-random (#'random (make-random-state t))
    (fuuid:make-v4))
#+end_src

** Running tests

- Load the tests via Quicklisp:

#+begin_src lisp
  (ql:quickload :frugal-uuid/test)
#+end_src

- Use [[https://asdf.common-lisp.dev/][ASDF]] or [[https://fiveam.common-lisp.dev/][FiveAM]] to run the tests:

#+begin_src lisp
  ;; Using ASDF:
  (asdf:test-system :frugal-uuid)
  ;; Using FiveAM directly:
  (fiveam:run! :frugal-uuid)
#+end_src

** Legal

- Released under the MIT License.
- [[https://commons.wikimedia.org/wiki/File:NASA_satellite_view_of_Southern_Ocean_phytoplankton_bloom_(crop).jpg][Source]] for README photo
